using System.Text.Json;
using Log;

namespace WebInstallationOfFloorsApplication;

public class TelegramService {
    private readonly Logger _logger;
    private readonly TaskRepository _taskRepository;
    private readonly HttpClient _httpClient;
    private readonly String _botToken;
    private readonly String _ngrokUrl;

    
    public TelegramService(TaskRepository taskRepository, Logger logger, HttpClient httpClient, 
        String botToken, String ngrokUrl) {
        _taskRepository = taskRepository;
        _logger = logger;
        _botToken = botToken;
        _httpClient = httpClient;
        _httpClient.BaseAddress = new Uri("https://api.telegram.org");
        _ngrokUrl = ngrokUrl;
    }
    
    public async System.Threading.Tasks.Task SetWebhookAsync(CancellationToken cancellationToken) {
        var url = $"{_ngrokUrl}/api/Telegram/webhook";
        string telegramUrl = $"/bot{_botToken}/setWebhook?url={url}";

        var response = await _httpClient.GetAsync(telegramUrl, cancellationToken);
        if (response.IsSuccessStatusCode) {
            _logger.Info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        } else {
            _logger.Error($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.StatusCode}");
        }
    }
    
    public async System.Threading.Tasks.Task HandleWebhookUpdateAsync(CallbackQueryDto callbackQueryDto, 
        CancellationToken cancellationToken) {
        var options = new JsonSerializerOptions {
            WriteIndented = true,
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        };
        _logger.Debug($"–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {JsonSerializer.Serialize(callbackQueryDto, options)}");
        
        var dataDetails = JsonSerializer.Deserialize<DataDetails>(callbackQueryDto.CallbackQuery.Data);
        if (dataDetails != null) {
            var action = dataDetails.Action;
            var taskId = dataDetails.TaskId;
        
            await _taskRepository.UpdateTaskStatusAsync(taskId,
                action == Action.Done ? TaskStatus.Done : TaskStatus.Reject, cancellationToken);
            _logger.Info($"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å ID {taskId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {action}");

            var taskUpdate = await _taskRepository.GetTaskAsync((int)taskId, cancellationToken);
            string message = FormatMessage(taskUpdate);

            await EditMessageTextAsync(callbackQueryDto.CallbackQuery.Message.Chat.Id, 
                callbackQueryDto.CallbackQuery.Message.MessageId, message, cancellationToken);
        }
    }
    
    public async System.Threading.Tasks.Task SendDailyMessagesAsync(CancellationToken cancellationToken) {
        _logger.Info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å");
        var tasks = (await _taskRepository.GetTasksForTomorrow(cancellationToken)).ToList();
        _logger.Info(tasks.Count != 0 ? "–ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã" : "–ó–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
        
        foreach (var task in tasks) {
            if (task.Worker?.ChatId != null) {
                string message = FormatMessage(task);
                await SendTelegramMessageAsync(task.Worker.ChatId, message, 
                    task.Status == TaskStatus.Open? task.Id : 0, cancellationToken);
                
                _logger.Info($"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {task.Worker.Name} \n: {message}");
            }
            else {
                _logger.Warning($"–ù–µ –Ω–∞–π–¥–µ–Ω ChatId –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —Å ID {task.WorkerId}");
            }
        }
        
    }
    
    private async System.Threading.Tasks.Task SendTelegramMessageAsync(long chatId, string text, long taskId, 
        CancellationToken cancellationToken) {
        string url = $"/bot{_botToken}/sendMessage";

        var parameters = new {
            chat_id = chatId,
            text = text,
            parse_mode = "Markdown",
            reply_markup = new {
                inline_keyboard = taskId == 0 ? new List<List<object>> {} : new List<List<object>> {
                    new List<object> {
                        new { text = "–û—Ç–º–µ–Ω–µ–Ω–æ", callback_data = JsonSerializer.Serialize(new {
                            action = "Reject", 
                            taskId = taskId 
                        })},
                        new { text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data = JsonSerializer.Serialize(new {
                            action = "Done", 
                            taskId = taskId
                        })}
                    }
                }
            }
        };
        
        await SendPostRequestAsync(parameters, url, cancellationToken);
    }
    
    private async System.Threading.Tasks.Task EditMessageTextAsync(long chatId, long messageId,  string text, 
        CancellationToken cancellationToken) {
        string url = $"/bot{_botToken}/editMessageText";

        var parameters = new {
            chat_id = chatId,
            message_id = messageId,
            text = text,
            parse_mode = "Markdown"
        };
        
        await SendPostRequestAsync(parameters, url, cancellationToken); 
    }

    private async System.Threading.Tasks.Task SendPostRequestAsync(object parameters, string url, 
        CancellationToken cancellationToken) {
        var json = JsonSerializer.Serialize(parameters);
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        try {
            var response = await _httpClient.PostAsync(url, content, cancellationToken);
            if (response.IsSuccessStatusCode) {
                _logger.Info($"–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {url}");
            } else {
                _logger.Error($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {url}: {response.StatusCode}");
            }
        } catch (Exception ex) {
            _logger.Error($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {url}: {ex.Message}");
        }
    }
    
    private string FormatMessage(Task task) {
        return (task.Status == TaskStatus.Done ? $"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! \n\n" : "") +
            (task.Status == TaskStatus.Reject ? $"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! \n\n" : "") +                                                          
            $"üìå *–ó–∞–¥–∞—á–∞ –Ω–∞ {task.Deadline:dd.MM.yyyy HH:mm}*\n\n" +
            $"üîπ *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {task.Title}\n" +
            $"üè† *–ê–¥—Ä–µ—Å:* {task.Address}\n" +
            $"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {task.Comment ?? "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}\n";
    }
    
}